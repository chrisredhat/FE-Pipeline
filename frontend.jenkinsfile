// Directbank Mobile CI-CD Pipeline Template 
def SEC_PASS=0
def QUA_PASS=0
def jsonObj

def CLEAN_BUILD_CACHE = @@@cleanBuildCache@@@
def PLUGIN_DOWNLOAD = @@@downloadPlugin@@@
def SIT_SKIP = 'false'
def UAT_SKIP = 'false'

def PLUGIN_LIST = [
    "cncbi-android-imeutil": "master",	
    "cncbi-app-call-app": "master",
    "cncbi-app-delegate-category": "master",
    "cncbi-background-mode": "master",
    "cncbi-baidu-push": "master",
    "cncbi-base64": "master",
    "cncbi-catfish-air": "master",
    "cncbi-custom-contact": "master",
    "cncbi-custom-geolocation": "master",
    "cncbi-custom-webview": "master",
    "cncbi-diagnostic": "master",
    "cncbi-in-app-provisioning": "master",
    "cncbi-ios-quitapp": "master",
    "cncbi-jailbreak-detection": "master",
    "cncbi-localization-strings": "master",
    "cncbi-mfp": "master",
    "cncbi-mfp-jsonstore": "master",
    "cncbi-mfp-push-ios": "master",
    "cncbi-moxtra-webchat": "master",
    "cncbi-multiscreen-detector": "master",	
    "cncbi-nnl": "master",
    "cncbi-privacyscreen": "master",
    "cncbi-qf-custom-webview": "master",
    "cncbi-qrscanner": "support-swift4",
    "cncbi-sensetime": "master",
    "cncbi-sso": "master",
    "cncbi-webpin": "master"
    ]

def APP_ENV = [
    'sit': 'mvp',
    'uat': 'mvp'
    ]

def DEV_ANDROID_DEVICE = 'htc'
def DEV_ANDROID_UUID = 'FA7CL1E00416'
def SIT_ANDROID_DEVICE = 'htc'
def SIT_ANDROID_UUID = 'FA7CL1E00416'
def UAT_ANDROID_DEVICE = 'htc'
def UAT_ANDROID_UUID = 'FA7CL1E00416'

def ARTIFACT_ID = 'inmotion'
def GROUP_ID = 'com.citic'
def APP_VERSION = "1.1.${BUILD_NUMBER}"

def ANDROID_GRADLE_VERSION = '3.2.0'
def IOS_SWIFT_VERSION = '4.2'
def IOS_DEVELOPMENT_TEAM_ID = '397ETSW7L9'
def GRADLE_FILE = '/Users/jenkins/workspace/download/gradle-4.6-all.zip'
def NODE_SASS_PATH = '/Users/jenkins/workspace/download/darwin-x64-48_binding.node'
def OPENSHIFT_CERT = '/Users/jenkins/Downloads/certs/root-ca-bundle.crt'
def WORKING_DIRECTORY = "/Users/jenkins/work/jenkins-build"

def BITBUCKET_CREDENTIAL_ID = 'directbank-bitbucket'
def BITBUCKET_PROJECT = 'INMOTION'
def BITBUCKET_REPO = 'directbank-mobile'
def BITBUCKET_REPO_BRANCH = '@@@branch@@@'
def BITBUCKET_TEST_REPO = 'directbank-mobile-test'
def BITBUCKET_TEST_REPO_BRANCH = '@@@testBranch@@@'
def BITBUCKET_URL = 'https://bitbucket-bitbucket.app.orc.oc01.cncbi'

def JIRA_INSTANCE = '51e903c6-f579-40cf-81de-9f5731250478'
def JIRA_PROJECT_KEY = 'INMOTION'
def JIRA_TEST_PLAN_KEY = 'INMOTION-1'
def JIRA_SITE = 'jira'

def NEXUS_CREDENTIAL_ID = "nexus"
def NEXUS_MAVEN_REPO = 'maven-public'
def NEXUS_NPM_REPO = 'npm-public'
def NEXUS_PROTOCOL = "https"
def NEXUS_REPOSITORY = "directbank-mobile"
def NEXUS_URL = "nexus-nexus.app.orc.oc01.cncbi"
def NEXUS_USER_TOKEN = 'FFo_C7zk:TMskURbDPotThZ2UGPTYClqExofMY5wFMB1xlBKHAVe_'
def NEXUS_VERSION = "nexus3"

def SONAR_ENVIRONMENT = 'sonarqube'
def SONAR_PROJECT_KEY = 'directbank-mobile'
def SONAR_URL = 'https://sonarqube-sonarqube.app.orc.oc01.cncbi'

def associateNexusTag(nexusUrl, nexusCredential, nexusRepo, groupId, artifactId, version, tagName){
    sh "curl -u ${nexusCredential} -X POST '${nexusUrl}/service/rest/v1/tags/associate/${tagName}?wait=true&repository=${nexusRepo}&format=maven2&group=${groupId}&name=${artifactId}&version=${version}' -H 'accept: application/json'"
}

def buildApp(workingDirectory, env, buildEnv, nexusMavenRepo, bitbucketRepoBranch, androidGradleVersion, iosSwiftVersion, artifactID, iosDevelopmentTeamID) {
    dir("${workingDirectory}") {
        sh "gsed -i \"s|var env.*.;|var env = '${env}-${buildEnv}';|\" build/rollup.config.js"
        sh "cp -vf build/${buildEnv}/${env}/config.xml ."
        sh "rm -rf node_modules"
        sh "rm -f package-lock.json"
        sh "npm install; cordova prepare"
        sh "cordova prepare android"
        sh "cordova prepare ios"
        sh "npm run ionic:build"
    }
    dir("${workingDirectory}/platforms/android") {
        sh "gsed -i 's|target=android-26|target=android-28|g' project.properties"
        sh "gsed -i -e \"s|cordova.system.*ANDROID_SUPPORT_V4_VERSION| |g\" project.properties"
        sh "gsed -i -e \"s|cordova.system.library.*=com.android.support:support-v4:+| |\" project.properties"
        sh "gsed -i 's/<application/<application android:allowBackup=\"true\"/' AndroidManifest.xml"
        sh "gsed -i 's|android:theme\">|android:theme, android:allowBackup\">|' AndroidManifest.xml"
        sh "rm -f libs/gson-2.3.1.jar"
        sh "gsed -i -e \"s|com.android.tools.build:gradle.*|com.android.tools.build:gradle:${androidGradleVersion}'|g\" build.gradle"
    }
    dir("${workingDirectory}/platforms/ios") {
        sh "gsed -i \"s/SWIFT_VERSION =.*/SWIFT_VERSION = ${iosSwiftVersion};/g\" ${artifactID}-${env}-${buildEnv}.xcodeproj/project.pbxproj"
    }
    dir("${workingDirectory}") {
        if (bitbucketRepoBranch =~ "release") {
            sh "cordova build ios --release --buildFlag='-UseModernBuildSystem=0' --codeSignIdentity='iPhone Developer' --developmentTeam=${iosDevelopmentTeamID}"
            sh 'cordova build android --release'            
        }
        else {            
            sh "cordova build ios --buildFlag='-UseModernBuildSystem=0' --codeSignIdentity='iPhone Developer' --developmentTeam=${iosDevelopmentTeamID}"
            sh 'cordova build android'
        }
    }
} 

def checkNexusQualityTag(nexusUserToken, nexusProtocol, nexusURL, nexusRepo, groupID, artifactID, version, requiredTag) {
    script {
        sh script: "curl -s -u ${nexusUserToken} -X GET '${nexusProtocol}://${nexusURL}/service/rest/v1/search?repository=${nexusRepo}&format=maven2&&group=${groupID}&name=${artifactID}&version=${version}' > test.out"
        resultstring =  readFile('test.out').trim()
        jsonObj = readJSON text: resultstring
        resultstring = "${jsonObj.items.tags}"

        if ( resultstring.contains(requiredTag) ){
            echo "Passed ${requiredTag}"
        } else {
            error "Failed to pass Quality Gate ${requiredTag}"
        }
    }
}

def checksumSha1(workingDirectory, nexusUrl, nexusRepo, groupId, artifactId, version, classifier, extension, artifactName){
    dir("${workingDirectory}") {
        sh """
            echo "Checksum Artifact: ${artifactName}"
            curl -s -X GET '${nexusUrl}/service/rest/v1/search/assets?repository=${nexusRepo}&group=${groupId}&name=${artifactId}&version=${version}&maven.extension=${extension}&maven.classifier=${classifier}' | grep -o -E '"sha1" : "\\b[0-9a-f]{40}\\b"' | awk '{print \$3}'
            checksumRemote=\$(curl -s -X GET '${nexusUrl}/service/rest/v1/search/assets?repository=${nexusRepo}&group=${groupId}&name=${artifactId}&version=${version}&maven.extension=${extension}&maven.classifier=${classifier}' | grep -o -E '"sha1" : "\\b[0-9a-f]{40}\\b"' | awk '{print \$3}')
            echo "Checksum from remote: \$checksumRemote"
            checksumLocal=\$(shasum -a 1 ${artifactName} | awk '{print \$1}')
            echo "Checksum from local: \$checksumLocal"
            if [ \$checksumRemote == \\\"\$checksumLocal\\\" ]; then echo 'Checksum Pass'; else echo 'Checksum Failed !'; rm -f ${artifactName}; exit 1; fi
        """
    }
}

def cleanBuildCache(workingDirectory) {
    dir("${workingDirectory}") {
        // NPM Global Cache
        sh "tree -L 1 ${HOME}/.nvm/versions/node/v6.11.0/lib/node_modules"
        sh "find ${HOME}/.nvm/versions/node/v6.11.0/lib/node_modules -type d -mindepth 1 -maxdepth 1 | grep -ve \"/npm\$\" | xargs -I {} rm -rf {}"
        sh "tree -L 1 ${HOME}/.nvm/versions/node/v6.11.0/lib/node_modules"
        // NPM Local Cache
        sh "npm cache clean --force"
        sh "rm -rf ${HOME}/.npm"
        // Gradle Daemon
        sh "gradle --status"
        sh "gradle --stop"
        sh "gradle --status"
        // Gradle Cache
        sh "find ${HOME}/.gradle -type d -mindepth 1 -maxdepth 1 | xargs -I {} rm -rf {}"
        sh "tree ${HOME}/.gradle"
    }
}

def createJiraIssue(jiraSite, jiraProjectKey, issueSummary, issueDescription, label, issuetype) {
    withEnv(["JIRA_SITE=${jiraSite}"]){
        script{     
            def issue = [fields:[project: [key: jiraProjectKey],
            summary: issueSummary,
            description: issueDescription,
            labels: ["${label}"],
            issuetype: [name: issuetype]]]
 
            response = jiraNewIssue issue: issue
            echo response.successful.toString()
            echo response.data.toString()
        }
    }
}

def createJiraXrayReport(workingDirectory, testEnvironment, jiraProjectKey, jiraTestPlanKey, jiraInstance) {
    dir("${workingDirectory}") {
        step([$class: 'XrayImportBuilder', 
        endpointName: '/junit', 
        importFilePath: "*.xml", 
        importToSameExecution: 'false', 
        testEnvironments: testEnvironment,
        projectKey: jiraProjectKey, 
        testPlankey: jiraTestPlanKey,
        serverInstance: jiraInstance])
    }
}

def downloadArtifact(workingDirectory, nexusUrl, nexusRepo, groupId, artifactId, version, classifier, extension, artifactName) {
    dir("${workingDirectory}") {
        // Download Artifact from Nexus Maven Repo
        sh "curl -X GET -L '${nexusUrl}/service/rest/v1/search/assets/download?repository=${nexusRepo}&group=${groupId}&name=${artifactId}&version=${version}&maven.extension=${extension}&maven.classifier=${classifier}' -o ${artifactName}"
        sh "chmod u+x ${artifactName}"
    }
}

def downloadSourceCodeGitLfs(credentials, gitUrl, gitProject, gitRepo, gitBranch, workingDirectory) {
    dir("${workingDirectory}") {
        sh "git init"
        sh "git config --add http.${gitUrl}.proxy ''"
        sh "git config credential.helper cache"
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: gitBranch]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'GitLFSPull']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentials, url: "${gitUrl}/scm/${gitProject}/${gitRepo}.git"]]]
        sh "git lfs fetch --all"
        sh "git credential-cache exit"
    }
}

def uploadArtifactToNexus(workingDirectory, nexusProtocol, nexusUrl, nexusRepo, nexusCred, groupID, artifactID, appVersion, classifier, fileType, filePath) {
    dir("${workingDirectory}"){
        script {
            if (classifier == 'prod') {
                classifier = ''
            }    
            nexusArtifactUploader(
                nexusVersion: 'nexus3',
          	    protocol: nexusProtocol,
          	    nexusUrl: nexusUrl, 
          	    groupId: groupID,
          	    version: appVersion,
          	    repository: nexusRepo,
          	    credentialsId: nexusCred,
          	    artifacts: [
              	    [artifactId: artifactID,
              	    classifier: classifier,
              	    file: filePath,
              	    type: fileType]
          	    ]
            );
        }
    }
}

def runAppiumTest(workingDirectory, apkPath, apkFileName, androidDeviceName, androidDeviceUUID) {
    dir("${workingDirectory}") {
        sh """
            export APKPATH=${apkPath}
            export APKFILENAME=${apkFileName}
            export ANDROID_DEVICE_NAME=${androidDeviceName}
            export ANDROID_DEVICE_UDID=${androidDeviceUUID}
            gradle --stop; gradle clean; gradle build -Djava.net.preferIPv4Stack=true --info
        """
    }
}

def shutdownAndroidSimulator() {
    sh 'adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done'
}

def shutdownIosSimulator() {
    sh 'killall "Simulator"'
}


pipeline {
    agent {
        node {
            label 'mac'
        }
    }
    environment {
        // SET Android Home
        ANDROID_HOME = "$HOME/Library/Android/sdk"
        
        // SET JAVA HOME
        JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home"
        
        // SET GRADLE HOME
        GRADLE_HOME = "/usr/local/opt/gradle"
        
        // SET GRADLE FILE FOR Cordova Build
        CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL = "file:${GRADLE_FILE}"
        
        // SET MAVEN HOME
        MAVEN_HOME = "/usr/local/apache-maven-3.5.4"

        // SET NODE6 PATH
        NODE6_HOME = "/Users/jenkins/.nvm/versions/node/v6.11.0"
        
        // SET NODE10 PATH
        NODE10_HOME = "/Users/jenkins/.nvm/versions/node/v10.17.0"

        // SET Sonar Scanner 
        SONAR_HOME = '/usr/local/opt/sonar-scanner-4.0.0.1744-macosx'
        
        // SET PATH
        PATH = "$PATH:$JAVA_HOME/bin:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$ANDROID_HOME/build-tools/28.0.3:$GRADLE_HOME/bin:$SONAR_HOME/bin:$MAVEN_HOME/bin"
    
        // SET Automation Test Env
        SYSTEMPORT = 8201
        NODEPATH = "$NODE10_HOME/bin/node"
        APPIUMJSPATH = "$NODE10_HOME/bin/appium"
        APPIUMIPADDRESS = "127.0.0.1"
        APPIUMPORT = 4723
        ANDROID_PLATFORM_VERSION="8.0.0"
    }
    stages {
        stage('Download Source Code') {
            steps {
                dir("${WORKING_DIRECTORY}") {
                    script {
                        sh "rm -rf ${BITBUCKET_PROJECT}"
                        sh "mkdir -p ${BITBUCKET_PROJECT}/${BITBUCKET_REPO}"
                        if(PLUGIN_DOWNLOAD == true) {
                            sh "rm -rf plugin"
                            sh "mkdir -p plugin"
                            PLUGIN_LIST.each { plugin ->
                                sleep 1
                                sh "mkdir -p plugin/${plugin.key}"
                                downloadSourceCodeGitLfs(BITBUCKET_CREDENTIAL_ID, BITBUCKET_URL, BITBUCKET_PROJECT, plugin.key, plugin.value, "${WORKING_DIRECTORY}/plugin/${plugin.key}")
                            }
                        }
                        else {
                            echo "Skip downloading plugins."
                        }
                    }
                    downloadSourceCodeGitLfs(BITBUCKET_CREDENTIAL_ID, BITBUCKET_URL, BITBUCKET_PROJECT, BITBUCKET_REPO, BITBUCKET_REPO_BRANCH, "${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}")
                }
            }
        }
        stage('Setup Build Environment') {
        	environment {
            	PATH = "$NODE6_HOME/bin:$PATH"
        	}
            steps {
                script {
                    dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}") {
                        if(CLEAN_BUILD_CACHE == true) {
                            cleanBuildCache(pwd())
                        }
                        sh """
                            npm config set registry ${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_NPM_REPO}
                            npm config set cafile ${OPENSHIFT_CERT}
                            npm config set strict-ssl=false
                            npm config set no_proxy=127.0.0.1,localhost
                            npm config set sass_binary_path=${NODE_SASS_PATH}
                            npm config set update-notifier=false
                        """

                        writeFile file: 'pom.xml', text: 
"""<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>${GROUP_ID}</groupId>
    <artifactId>${ARTIFACT_ID}</artifactId>
    <version>${APP_VERSION}</version>
</project>"""

                        writeFile file: "${HOME}/.gradle/init.gradle", text:
"""allprojects {
    repositories {
        maven {
            url = '${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_MAVEN_REPO}'
        }
    }
    buildscript {
        repositories {
            maven {
                url = '${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_MAVEN_REPO}'
            }
        }
    }
}"""
                    }
                }
            }
        }
        stage('Code Analysis') {
        	environment {
                PATH = "$NODE10_HOME/bin:$PATH"
                NODE_PATH = "$NODE10_HOME/lib/node_modules"
            }
            steps {
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}") {
                    withSonarQubeEnv(SONAR_ENVIRONMENT) {
                        sh "sonar-scanner -X -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=src"
                    }
                }
            }
        }
        stage('Quality Gate Checking'){
            agent {
                label 'master'
            }
            steps{
                script{
                    timeout(time: 1, unit: 'HOURS') { 
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
            post {
                success {
                    script{
                        SEC_PASS=1
                    }
                }
                failure{ 
                    script {
                        createJiraIssue(JIRA_SITE, JIRA_PROJECT_KEY, 'source code scan failed', "${SONAR_URL}/dashboard?id=${SONAR_PROJECT_KEY}", BITBUCKET_REPO_BRANCH, 'Bug')
                    }
                }
            }
        }
        stage('Build') {
        	environment {
                PATH = "$NODE6_HOME/bin:$PATH"
            }
            steps {
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}"){
                    script {
                        APP_ENV.each { deployEnv ->
                            sleep 1
                            println("Build ${deployEnv.key} - ${deployEnv.value}")
                            sh "rm -rf ${BITBUCKET_REPO}-${deployEnv.key}*"
                            sh "cp -r ${BITBUCKET_REPO} ${BITBUCKET_REPO}-${deployEnv.key}"
                            buildApp("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}-${deployEnv.key}", deployEnv.key, deployEnv.value, "${NEXUS_PROTOCOL}://${NEXUS_URL}/repository/${NEXUS_MAVEN_REPO}/", BITBUCKET_REPO_BRANCH, ANDROID_GRADLE_VERSION, IOS_SWIFT_VERSION, ARTIFACT_ID, IOS_DEVELOPMENT_TEAM_ID)
                        }
                    }
                }
            }
            post {  
                failure {
                    script {
                    	BLUE_OCEAN_JOB_NAME = JOB_NAME.replace('/', '%2F')
                        createJiraIssue(JIRA_SITE, JIRA_PROJECT_KEY, 'Mobile App Build Failed', "${JENKINS_URL}blue/organizations/jenkins/${BLUE_OCEAN_JOB_NAME}/detail/${JOB_BASE_NAME}/${BUILD_NUMBER}/pipeline", BITBUCKET_REPO_BRANCH, 'Bug')
                    }
                }
            }
        }
        stage('DEV Test') {
            steps {
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}") {
                    sh "rm -rf dev-test"
                    sh "mkdir -p dev-test/android dev-test/ios"
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/dev-test/android") {
                    script {
                    	if (BITBUCKET_REPO_BRANCH =~ "release") {		
                            RELEASE_TYPE = 'release'		
                            ANDROID_APP_NAME = 'android-universal-release.apk'		
                        } 		
                        else {		
                            RELEASE_TYPE = 'debug'		
                            ANDROID_APP_NAME = 'android-universal-debug.apk'		
                        }
                        downloadSourceCodeGitLfs(BITBUCKET_CREDENTIAL_ID, BITBUCKET_URL, BITBUCKET_PROJECT, BITBUCKET_TEST_REPO, BITBUCKET_TEST_REPO_BRANCH, pwd())
                        APK_PATH="${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}-sit/platforms/android/build/outputs/apk/${RELEASE_TYPE}"
                        runAppiumTest(pwd(), APK_PATH, ANDROID_APP_NAME, DEV_ANDROID_DEVICE, DEV_ANDROID_UUID)
                    }
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/dev-test/ios") {
                    echo "Insert IOS Test Here"
                }
            }
            post{
                always {
                    script {
                        //shutdownAndroidSimulator()
                        //shutdownIosSimulator()
                        createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/dev-test/android/build/test-results/test", "DEV-${BITBUCKET_TEST_REPO_BRANCH}", JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                        //createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/dev-test/ios/build/test-results/test", "DEV-${BITBUCKET_TEST_REPO_BRANCH}", JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                    }
                }
                success {
                    script{
                        QUA_PASS=1
                    }
                }
            }
        }
        stage('Upload to Repo') {
            steps {               
              	dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}") {
              		script {
                    	if (BITBUCKET_REPO_BRANCH =~ "release") {		
                            RELEASE_TYPE = 'release'		
                            ANDROID_APP_NAME = 'android-universal-release.apk'		
                        } 		
                        else {		
                            RELEASE_TYPE = 'debug'		
                            ANDROID_APP_NAME = 'android-universal-debug.apk'		
                        }
              		    pom = readMavenPom file: "pom.xml";
              		    APP_ENV.each { deployEnv ->
                            sleep 1
                            println("upload ${deployEnv.key} - ${deployEnv.value}")
                            uploadArtifactToNexus(pwd(), NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, NEXUS_CREDENTIAL_ID, pom.groupId, pom.artifactId, pom.version, deployEnv.key, 'apk', "${BITBUCKET_REPO}-${deployEnv.key}/platforms/android/build/outputs/apk/${RELEASE_TYPE}/${ANDROID_APP_NAME}")
                            uploadArtifactToNexus(pwd(), NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, NEXUS_CREDENTIAL_ID, pom.groupId, pom.artifactId, pom.version, deployEnv.key, 'apk', "${BITBUCKET_REPO}-${deployEnv.key}/platforms/ios/build/device/${ARTIFACT_ID}-*.ipa")
                        }
                        uploadArtifactToNexus("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}", NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, NEXUS_CREDENTIAL_ID, pom.groupId, pom.artifactId, pom.version, '', 'pom', "pom.xml")
               		}
                }  
            }
            post{
                success{
                    script {
                        if(SEC_PASS == 1) {
                            associateNexusTag("${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_USER_TOKEN, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'Security_Pass')
                        }
                        if(QUA_PASS == 1){
                            associateNexusTag("${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_USER_TOKEN, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'DEV_Quality_Pass')
                        }
                        sleep 5
                    }
                }
                failure {
                    script {
                    	BLUE_OCEAN_JOB_NAME = JOB_NAME.replace('/', '%2F')
                        createJiraIssue(JIRA_SITE, JIRA_PROJECT_KEY, 'Upload Artifacts To Nexus Failed', "${JENKINS_URL}blue/organizations/jenkins/${BLUE_OCEAN_JOB_NAME}/detail/${JOB_BASE_NAME}/${BUILD_NUMBER}/pipeline", BITBUCKET_REPO_BRANCH, 'Bug')
                    }
                }
            }
        }
        stage('SIT') {
            when {
                allOf{
                    expression {
                        (SIT_SKIP =~ "false") && !(BITBUCKET_REPO_BRANCH =~ "feature")
                    }   
                }
            }
            steps {
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}") {
                    sh "rm -rf sit-test"
                    sh "mkdir -p sit-test/android sit-test/ios"
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/sit-test/android") {
                    script {
                    	checkNexusQualityTag(NEXUS_USER_TOKEN, NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'Security_Pass')
                        checkNexusQualityTag(NEXUS_USER_TOKEN, NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'DEV_Quality_Pass')
                        downloadSourceCodeGitLfs(BITBUCKET_CREDENTIAL_ID, BITBUCKET_URL, BITBUCKET_PROJECT, BITBUCKET_TEST_REPO, BITBUCKET_TEST_REPO_BRANCH, pwd())
                        downloadArtifact(pwd(), "${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'sit', 'apk', "${ARTIFACT_ID}.apk")
                        checksumSha1(pwd(), "${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'sit', 'apk', "${ARTIFACT_ID}.apk")
                        runAppiumTest(pwd(), pwd(), "${ARTIFACT_ID}.apk", SIT_ANDROID_DEVICE, SIT_ANDROID_UUID)
                    }
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/sit-test/ios") {
                    echo "Insert IOS Test Here"
                }
            }
            post{
                always {
                    script {
                        //shutdownAndroidSimulator()
                        //shutdownIosSimulator()
                        createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/sit-test/android/build/test-results/test", 'SIT', JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                        //createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/sit-test/ios/build/test-results/test", 'SIT', JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                    }
                }
                success{
                    script {
                        associateNexusTag("${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_USER_TOKEN, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'SIT_Quality_Pass')
                        sleep 5
                    }
                }
            }
        }
        stage('UAT') {
            when {
                allOf{
                    expression {
                        (UAT_SKIP =~ "false") && !(BITBUCKET_REPO_BRANCH =~ "feature") && !(BITBUCKET_REPO_BRANCH =~ "develop")
                    }
                }
            }
            steps {
                input "Deploy to UAT ?"
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}") {
                    sh "rm -rf uat-test"
                    sh "mkdir -p uat-test/android uat-test/ios"
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/uat-test/android") {
                    script {
                        checkNexusQualityTag(NEXUS_USER_TOKEN, NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'Security_Pass')
                        checkNexusQualityTag(NEXUS_USER_TOKEN, NEXUS_PROTOCOL, NEXUS_URL, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'SIT_Quality_Pass')
                        downloadSourceCodeGitLfs(BITBUCKET_CREDENTIAL_ID, BITBUCKET_URL, BITBUCKET_PROJECT, BITBUCKET_TEST_REPO, BITBUCKET_TEST_REPO_BRANCH, pwd())
                        downloadArtifact(pwd(), "${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'uat', 'apk', "${ARTIFACT_ID}.apk")
                        checksumSha1(pwd(), "${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'uat', 'apk', "${ARTIFACT_ID}.apk")
                        runAppiumTest(pwd(), pwd(), "${ARTIFACT_ID}.apk", UAT_ANDROID_DEVICE, UAT_ANDROID_UUID)
                    }
                }
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/uat-test/ios") {
                    echo "Insert IOS Test Here"
                }
                input "UAT PASS"
            }
            post{
                always {
                    script {
                        //shutdownAndroidSimulator()
                        //shutdownIosSimulator()
                        createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/uat-test/android/build/test-results/test", 'UAT', JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                        //createJiraXrayReport("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/uat-test/ios/build/test-results/test", 'UAT', JIRA_PROJECT_KEY, JIRA_TEST_PLAN_KEY, JIRA_INSTANCE)
                    }
                }
                success{
                    script {
                        associateNexusTag("${NEXUS_PROTOCOL}://${NEXUS_URL}", NEXUS_USER_TOKEN, NEXUS_REPOSITORY, GROUP_ID, ARTIFACT_ID, APP_VERSION, 'UAT_Quality_Pass')
                        sleep 5
                    }
                }
            }
        }
        /*
		stage('Upload To TestFlight') {
        	environment {
                LC_ALL = 'en_US.UTF-8'
                LANG = 'en_US.UTF-8'
                RUBY_PATH = "/usr/local/opt/ruby/bin"
                FASTLANE_PATH = "/usr/local/lib/ruby/gems/2.6.0/gems/fastlane-2.141.0/bin"
                PATH = "$FASTLANE_PATH:$RUBY_PATH:$PATH"
            }
            steps {
                dir("${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}-sit/Fastlane/IOS") {
                    script {
                        ansiColor('xterm') {
                            sh "fastlane pushsit apple_id:'itg_cp_devops01@cncbinternational.com' ipa_path:'${WORKING_DIRECTORY}/${BITBUCKET_PROJECT}/${BITBUCKET_REPO}-sit/platforms/ios/build/device/inMotion-SIT-MVP.ipa'"   
                        }
                    }
                }
            }
        }
        */
    }
}

